// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
