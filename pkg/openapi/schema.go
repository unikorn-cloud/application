// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xae3OjOLb/KiruVs1ujeO3e6ZdtbXlDuluzzU4aZP0ONO5KRlkLAwSI4lgnMp3v3UE",
	"2Nghr+ne+Q+QdHQePx2dn8S94fIo5owwJY3hvRFjgSOiiNBvXPiY0S1WlLOxeV62QZNHpCtoDC3G0HBW",
	"BFU7I4Yj0jQaBoXWGKuV0TDgmzE8Emo0DEH+TKggnjFUIiENQ7orEmGY5B+CLI2h8T+tvZKtvFW21smC",
	"CEYUkTaOyF63h4eGEQseEFe9qHLR7zltd6L+C4o+gEgZcyaJdjeO45C62jHyS9EA313OFGHqqEsrkGDI",
	"vUE2OIpDYgz/uDciorCHlVbKFUR3dKi2pNvu9k7av5z0Ok6nPewPhv3BtdE48sq54HfUIxJhhnCoiGBY",
	"0TuCBMnnJR6Sigvsa+dBV4HUCivkUakEXSSKyF0P7Aou5TemVgT9784LyA0TqYhoIvSRYJUIItGK+qsT",
	"fIdpiBc0VFkDUeYKEhGmcIgkw7FccQVaeWiB3XUSy8Y35lGJQRISxOV3RGQN3UGusCAeWtKQoIgnTEn0",
	"T0Gw10oFVQRFmGX/0tH2jKHh/jJ49yvpeifL93hx0h/0vJP3uIdPBp3eL4PlL7/2u+8WezSEnPkrLpih",
	"MXZHJeWMMn+msEqkMTQStmY8ZcZDw5AxcTXquJtoOwoPr5SK5bDVKkU1KW8ZDWOVRJh9IdjDi5DY+WyT",
	"/WzUzcPz2e5eZx/ia7NNnU8fB9e//7a0ZmP/+tPH9nzWSeZfO+H57Ddr/nsYunS0GdMP/cXXTeJu2xR/",
	"/tJ2TX436Xk9Lxv0rGxw50bunRWMUuv0/daLXDr+fB1f/+6dLnr++3Ew8q3T0WbqXCRWcNm1nLVvOZeD",
	"STDqT52zbBz0f/U+he3Fp8uf8Vf7bhGkd+X7+ecPK++T719HoVyYbTreXkVWMG7PQVfQ3Vn3JsFZNjXP",
	"5NQcJXYw7k6/nm2s035qmWtpOaPEMkeDiTmS1mm6mThnydS57E9m/c3UsbZ2lCp71s+mpjWwT9ubSTDq",
	"2OZ6OzEvEtu56NvOWlqBm0wdf2s5V6vprD+wgotsOksHk2Cd2eZ4L/u0v7GCdX8Kz8E8tc2LATYvE8sZ",
	"d+fOOpk664Gd6XGDqePCmHRinslJcNa1tqM+6GZv1z1rey3tWT+dOv7GnrUzO+sPLHPettrpYArfzflm",
	"YvrpJLjYWtvL9oVzlk6CUTo119nErD4Xepk1PrridLLt/+p++tjGpx8i/HUjz2fjwP46z6zgy2pMP6zP",
	"Z7/ZluNuJ8F8YDtzaZ35mXXa79jBqGddnsFz1wrOUnuWVp/TYt50Yo7TCcTbnPeugrPt9LTfsQK/bX+t",
	"jKVp9bkcW87TtbPKc9vf2FsrsYN1x452MqQVaJs2j+e97Eycqg775wv9fZ5Ze92LsSN5YPPHWFlZv207",
	"l9I2zxLb8TcTZ5zYzgh83ZsXvrfMeYm1vR2zdm8SrLe2c9memH5ibS9T21lZgIdJMGrbzkVnYrodwJz1",
	"1VIgx876qW2OetasDbL6NqwZ099Y5hzaNzYFjJ317G6qbNrf2rkNW/u037edUWd6pv2SWsG8k/thlNnB",
	"5Q5rU2cN/gMdN1bgJ1Nn3rWCKz5xSpwWYxy/txuvn3frB/Dbm5qXWf486kzNj5atZV207e2ltLcga92z",
	"nZWcOBebSXCRWs48mzh+YgXz7sWzPks301m/a5luZzpLO4CZqflR7nzuVH1+ti3xnj+XeAe93L69PdOx",
	"ghxjOR+lNeuDfiA3zw/BeutU1oYNODLHAzuwpe34ib29HNjbubL0urQ2tnlRkdHeybh4WZ+enfU3EB+b",
	"pm1rpm3CY/rrz+d5vvz51P/3v42GEVKX6L3aGMXYXZGTbrONJsXHhnFHBGwUUu/QxYsxNDrNQbNjPNw8",
	"PNy8tpaoVgh5AXG4fY9QSKVCfImKzTQkqDqmCTtTwuiaC3bihjzxbl0uyG2EKbuN1/4tjwnDMb11eRRx",
	"drvA3hfyZ0Kk+iv1yL1BhODCGBqU3eGQerciF2Y08pbbQ+2LVrTgXoaKIXorfZVv3mBWrlaN/75UNVhi",
	"GkK9o+UjrY02tIE4FD1QFOW9PU4kYlwhcAym7BvDYbjrQfNihITem91Pma7AwhkRd0ScgdbfFwepBRX2",
	"1wehsFpxpPiaMOSGmEZ/bxRGDCWMbGLiQr2puyHuuokQxGsgtaISRThDCwJVaqWnEphJSpgqxmDmfWPQ",
	"UyauS4iHOEMYCaJE1kTjZS6JSvaT0sFysSQNFIcES13wcqEQVQjrYphKmZC3xi9hOFErLuiWeN8XOOy6",
	"RMpbjzBKvCciB3MRpgppBXz/5sjVqVAul9yGAlYrLBHZxLA4mpqzFWoc+cQkMWEeYS7NKdJxupMkz3aV",
	"HJfzkZSGISCEMqlwCFosyJILkge90l8zAUUi+Ybcu9MqA/eqLIbUj4XA+r2+42PlWVUN5O26NnN2EROh",
	"Cqtz9lHHYKsSShZb6AN8jPlGzjJL4vpHLutm14svgN4eqQ08RJ8GHGhR5ZY/CEiCSJ4Il8CEVim+Qp5e",
	"GY8ZdD82VMto7LV+0WbQiTDvOZyJshPxDlyvIVfkpD3i8FJpevw3Am5Wss5noPYYX0cc9Xi4WW1GIWVr",
	"tCzX9KHYJRcRVkCEBX2MxFqWezzZZ+iCRNHnNQAv2fHjqC2wJO/6iDCXQ8RmV58QdG0i5EBQ5IonoYdS",
	"LtaIMrTgaoVC6q+UPkbwsFiDjRGRB6YtMkXqlNgVgXXrtGhECfOIQOmKuqtj/yEqkSB69/FqrdyXka/G",
	"zVU55HhxPA5E4wgFe4MK/1YUeGEpXZUl7gspr5BXg8ejrP/WVQLDtMHVJf1KIZU8sPf5i8n3J4k+kzBC",
	"7goLVTXs+WRcin+dQ1+5A5bTy7+SacrYPZ9majXZUY843vONt2ugN5+a6Z86R63RpHLYqHMGshIo6gkq",
	"ynhk2rOyWKfMR5yFGQp5SoQuAnUUsauIkA3EkmhBhIQiZpXFK8JkA0kFUYYkQZiHUqpWCO8HQdd8VH4e",
	"CfMqFHGp0LteRTbknJAwX63ATRHeTPSLMXzXaxgRZeVrpyYXvLlYe+SlT4QRQd2iVI6IlNgnDQSxwYpC",
	"6tV2cagqu4+X6BNSRwgsI4XUXF+o8zDzckfrrPfZcc6LLpCZm0hTG4mwIDpne2XHKRSUXQRbOV0W+Gig",
	"RaJ011wuKSIA+glKFBYZBEglUguXeq8anY8l4mqVH1eDcC5JKReKw6yYCywlLIlgdT5mrdWC/tYNgWsY",
	"jUfFecJkEgN9IDA2L/tvdQgbO5nS5fr9iJEpEsVcYEHDDNhDSeIrA3ezlh98gZk6mlV/K6dkXN0uecJA",
	"NZezZUhdlRdGK+7dQisOAfzHqkfEo7gUsuRiQT2PVHPVHo41dOQYGVdELMDnBdJQ3roAVECktYSXE+bT",
	"zLUuhb5hleyzywQvSHiFw4TUwTvPH5Bg8vwSQm/4mpAGUhlkvjDMUAIgBuCVFa5ORAU3cTFDC/KNUeaR",
	"DfEgD4ALoEoF9OvFhhVQf2No/N8f7ZP3o5NrfLK9+ed/hvu3k9vmzX278a7zUOnxr//8w/i+dFEqbFWq",
	"/eNDksKksrQunALm4jCEtbY3Gwq5/N5G377Ius3+GdQ4+hClkFVpKo4BuH7RHseJD8WL1K4EZ+dZIQLO",
	"p/n2RtVWVSW3+kGMphZHsJthX/7AaRT2J1SqJ9jdX4v4ec2N1hO3prt+OtMSvevv4lRNoeWF2OF9WfVV",
	"px2PHDXn6/zmx0D5gF0O7w0chtOlPoz9QdEAJ1D3y/HKeWjcP8J6SPZXsnXOVTQixdFhgfoUS6TH5bRg",
	"x0M8rMgJdK9DdVwbyx/M2msAc4zHGj0eJ+qbxhszjE4qbz2MeyJI/w08iJeRoC/nifchq4dBIjVN5Kjo",
	"dwCJ2jx2eNv/emgVE7weWtR7QmVG/0wqwsdmrZ4R93TJ9aLlSey9zvJS4guW40O7C/GvtfsI11QXU1WX",
	"vwLW+tBhB2kqDwqEojYIgKmQDZUqJw8eZz+p8h7hG8MsO8y/0GdFcKhWRdGbl8dQniypQkvBI4ShiXlY",
	"l63f2E6D3O7mN2Z8X+2ksF/P9cWCKgH1uMJ+vieDurpYeu0h56jEVSmi/mikvlyD2Osm2KAARwr7rzwh",
	"LWXefLdr9D79DF2GyuDVPPmNUXlEox+AcbiJoCqbufpsS//npUne4eH9Y5WnMRH5AUPhLVnyswXBApiV",
	"Ptk/vIbQ6yvkaX6wX5An3XLKPfLo46UIK//IUA8Eqax5YHaTC7+Vq9y667YOxgOjAmYF04HxoNFfkKnH",
	"aW+VwddN+ZUHZUv+8mk8EDvqEljmGIU4K3+UklRJTW95XKKyclxRjIKF7iFNy/KC9mDNH194cKY4ijDD",
	"PvFqfrSSzW9Mp55MX0IirH+3IgKF5I6E6BzjGZI8TMpwKarC/C57b82ssGZ0PjYqp2JGu9lttgFmBfiM",
	"odFrtpu9nMKsdNRbOKatu06r+uOfbN0f/gf40Cr+tJOt+90/dw+t58+cTnMD6/yul5RPalYerEd56MD9",
	"Zbnih0f4nO29aGgr8yUw9vQRihrF9KozrRo2PfxnsjDqvDRpVDXo6P+/brv91Prf9WvV/iT40DD6rxn8",
	"fVf/epbOD52l9ob0oWEMfrA1z92kV5OirgLr0+EfNw9ArKp/yD5RMe67tJ76gxYKwheG1vzECiXF5uTg",
	"nP7EFzyJjaEBlkN++v8AAAD//4WMtbjSKwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
