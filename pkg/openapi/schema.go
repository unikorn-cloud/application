// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"mKiafvz/AAAA///lk6yxDyYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
